continue
:required_skills[]
:job_title
job_title
job_title,
continue
job_title
job_params
@current_user&.company&.jobs&.build(job_params)
continue
object.resume.attached?
continue
Rails.application.routes.url_helpers.rails_blob_path(only_path: true)
only_path
only_path true
only_path: true
object.resume
url(object.resume)
url_for(object.resume)
url_for(object.resume , only_path: true)
Rails.application.routes.url_helpers.rails_blob_path(object.resume, only_path: true)
Rails.application.routes.url_helpers.rails_blob_url(obje true)
continue
 job.job_applications.new
 job.job_applications
 @current_user.job_applications
 @current_user.job
job
n
continue
n
application_params
@job
n
Job.find_by_id(params[:job_id])
n
@current_user.type == 'JobSeeker'
continue
n
@current_user.job_applications.all
n
@current_user.type == "JobSeeker"
continue
job.status
job.status("approved")
job.statuses("approved")
job.statuses.key?("approved")
job.status.key?("approved")
job
job.where("job_applications.status=?","approved")
job.where("job_applications.status=?","applied")
job = JobApplication.find_by_id(params[:id])
continue
params[:id]
job = JobApplication.find_by_id(params[:id])
@current_user.type == "JobSeeker"
exit
suggested_jobs.blank?
Job.where('required_skills IN (?)', @current_user.skills.pluck("group_concat(skill_name)"))
n
@current_user.type == "JobSeeker"
continue
@current_user.skills.user_id
Skill.user_id
skills.user_id
@current_user.id
@current_user.type
exit
default_render unless performed?
n
m
n
skill_params
@skill
@skill.update(skill_params)
exit
skill_params
@skill
@skill.update(skill_params)
n
exit
@skill.update(skill_params)
n
exit
@skill.update(skill_params)
n
@current_user.type == "JobSeeker"
exit
JobApplication.joins(:job).where(user_id: @current_user.id).pluck("jobs.job_title")
JobApplication.joins(:job).where(user_id: @current_user.id).pluck("jobs.job_title)
result
n
exit
result.select("user_id, jobs.job_title").where(user_id: 1)
result.select("user_id, jobs.job_title").where(user_id: 2)
result.select("user_id, jobs.job_title").where(user_id: @current_user.id)
result.select(:user_id, :job_id).where(user_id: @current_user.id)
result.select(:user_id).where(user_id: @current_user.id)
result
n
exit
result.where(user_id: user_id)
result.select(:user_id)
result.user_id
result
n
exit
result.user_id
@current_user.id == result.user_id
result
n
result
n
exit
job
@current_user.id == job.user_id
n
job
n
exit
 @current_user.id == job.user_id
n
job = JobApplication.all
n
exit
job
@current_user.id == job.user_id
Job = JobApplication.all
JobApplication.status.key?
JobApplication.status
JobApplication.status?
@current_user.id == JobApplication.user_id
n
@current_user.type == "JobSeeker"
exit
Job.where("required_skills in (?)", "ROR, Python")
Job.where("required_skills IN (?)", "ROR, Python")
Job.where("required_skills IN (?)", "ROR, python")
Job.where("required_skills IN (?)", "ROR,")
Job.where("required_skills IN (?)", "ROR")
Job.where("required_skills IN (?)", "ROR, Python")
Job.where(required_skills IN (?): "ROR, Python")
Job.where(required_skills in (?): "ROR, Python")
Job.where(required_skills: "ROR, Python")
Job.where(required_skills: "ROR, python")
Job.where(required_skills: "ROR")
Job.where(required_skills: "ROR, Python")
Job.where("required_skills=?","ROR, python" )
Job.where("required_skills in (?)","ROR, python" )
Job.where("required_skills in (?)","ROR" )
Job.where("required_skills=?","ROR" )
Job.select(:required_skills)
Job.select(:job_title)
Job.all
Job.job_title
Job.required_skill
Job.required_skills
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.pluck(:skill_name))
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.pluck(:skill_name)
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.pluck("skill_name"))
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.pluck("group_concat(skill_name)"))
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.select("group_concat(skill_name)"))
n
@current_user.type == "JobSeeker"
exit
@current_user.type == "JobSeeker"
@current_user.type == "JobSeeker
exit
suggested_jobs
suggested_jobs = Job.where('required_skills IN (?)', @current_user.skills.select(:skill_name))
suggested_jobs
n
exit
suggested_jobs
n
Job.where('required_skills IN (?)', @current_user.skills.pluck(:skills))
n
@current_user.type == "JobSeeker"
exit
render json: { message: "Job application updated successfully!"}
n
status_update
status_update = application.update(status: new_status)
exit
ret = super
n
exit
status_update = @application.update(status: new_status)
new_status = params[:status]
n
@current_user == company.user
n
company
comany
n
application
n
exit
b
company
n
company
n
a
n
exit
a
n
JobApplication.find_by_id(params[:id])
a
exit
JobApplication.find_by_id(params[:id])
JobApplication
a
exit
a
exit
JobApplication.all
application.update(status: "approved")
application
application =  JobApplication.find_by_id(params[:id])
a
a =  JobApplication.find_by_id(params[:id])
 JobApplication.find_by_id(params[:id])
params[:id]
id
application
exit
@application
exit
@application
exit
@application
exit
@application
exit
@application
exit
Rails.application.secrets
Rails.application.secret
Rails.application.secrets
Rails.application
Rails.application.secrets
exit
company
exit
@current_user
company
exit
company
@current_user.type
exit
company
if
exit
company
